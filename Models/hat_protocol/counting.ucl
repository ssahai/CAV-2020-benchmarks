module main
{
    define valid(a: [integer]integer, cnt : integer) : boolean =
        (forall (j : integer) :: (j >= 0 && j < cnt) ==> (a[j] >= 0 && a[j] <= 1)) &&
        (forall (j : integer) :: (j < 0 || j >= cnt) ==> (a[j] == 0));

    define v1(a: [integer]integer, cnt : integer) : boolean =
        valid(a, cnt) && (exists (j : integer) :: j >= 0 && j < cnt && a[j] == 1);

    define v2(a: [integer]integer, cnt : integer) : boolean =
        valid(a, cnt) && (forall (j : integer) :: (j >= 0 && j < cnt) ==> a[j] == 0);

    define extn(a: [integer]integer, cnt : integer, ind : integer) : [integer]integer =
        a[cnt -> ind];

    input i1, i2 : integer;
    var a1, a2 : [integer]integer;
    var n : integer;

    init {
        assume (n > 0);
        assume valid(a1, n);
        assume valid(a2, n);
    }

    assume iv: (i1 == 0 || i1 == 1) && (i2 == 0 || i2 == 1);
    invariant nn: (n > 0);
    invariant nv: valid(a1, n) && valid(a2, n);

    next {
    }

    invariant ex1: valid(extn(a1, n, i1), n + 1);
    invariant ex2: valid(extn(a2, n, i2), n + 1);
    invariant diff: (a1 != a2 || i1 != i2) ==> 
                       (extn(a1, n, i1) != extn(a2, n, i2));
    invariant mutex: !v1(a1, n) || !v2(a1, n);
    invariant union: (v1(a1, n) || v2(a1, n)) <==> (valid(a1, n));
    
    control {
        v = induction(1);
        check;
        print_results;
        v.print_cex(
        a1[0], a1[1], a1[2], a1[4], a1[5],
        a1[5], a1[6], a1[7], a1[9], a1[10],
        a1[10], a1[11], a1[12], a1[14], a1[15],
        a1[15], a1[16], a1[17], a1[19], a1[20],
        a1[20], a1[21], a1[22], a1[24], a1[25],
        a1[25], a1[26], a1[27], a1[29], a1[30],
        a1[30], a1[31], a1[32], a1[34], a1[35],
        a1[35], a1[36], a1[37], a1[39], a1[40],
        a1[40], a1[41], a1[42], a1[44], a1[45],
        n, i1);
    }
}
